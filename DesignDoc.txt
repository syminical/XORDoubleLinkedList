
XOR Double Linked List

Author: Alexandru Manaila

Overview: Eliminate redundant node address storage in a doubly linked-list, while maintaining the double linked property.
	  	Traversal options based on current node (non-empty list):
			Head: Next node, if it exists.      (Assume a Head node is always the first node.)
			Tail: Previous node, if it exists.  (Assume a Tail node is always the last node.)
			Body: Previous node or next node.   (Assume a body node is neither a head or a tail node.)

Context: Each body node in a traditional doubly linked list stores two node addresses, which allows for list traversal in both directions. This means that for a list with N nodes there will be (n-2) nodes storing two addresses. Combined with the two addresses stored in the head and tail nodes, a doubly linked list with N nodes has 2(N-2)+2=2(N-1) node addresses stored in memory. Further, the address of each body node is stored twice:
	 	A <-> B <-> C <-> D  (Doubly linked list with 4 nodes.)  N = 4
	 	B     AC    BD    C  (Addresses stored in node above.)
		1     11    21    2  (Address appearance count, left to right.)

	 These properties of XOR (bit-wise Exclusive Or) can be used to combine two node addresses into a single value, stored in each node.
	 	0 XOR A = A
		A XOR B = B XOR A
		(A XOR B) XOR B = A
	 		The list above would become:
				A <-> B <-> C <-> D    N = 4 
	       		       0xB   AxC   BxD   Cx0   (AxB = A XOR B, each node stores one such value.)
				1     1     1     1    (No redundancy.)
		XOR halves the number of address stores per body node, compared to a non-XOR double linked list. This new list only has N 'addresses' stored in memory. (N-2 less)
		In order to traverse a XOR doubly linked list (in any direction), the address of the previously visited node must also be stored in memory. This brings the total improvement of using XOR to (N-1) less node address stores for a doubly linked list.

Milestones: Node class, List class, iteration.

Extra: There is room for customization. Other implementations may require different choices to the following:
       * Which constructors are allowed?
       * Which methods are needed?
         * What should they return?
	   * e.g. I chose to make List.remove() return void, but one may want it to return a boolean.
